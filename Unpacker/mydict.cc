//
// File generated by rootcint at Wed Mar 30 23:09:12 2011

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "mydict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void HldSubEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_HldSubEvent(void *p = 0);
   static void *newArray_HldSubEvent(Long_t size, void *p);
   static void delete_HldSubEvent(void *p);
   static void deleteArray_HldSubEvent(void *p);
   static void destruct_HldSubEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HldSubEvent*)
   {
      ::HldSubEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldSubEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldSubEvent", ::HldSubEvent::Class_Version(), "./hldsubevent_wk.h", 22,
                  typeid(::HldSubEvent), DefineBehavior(ptr, ptr),
                  &::HldSubEvent::Dictionary, isa_proxy, 0,
                  sizeof(::HldSubEvent) );
      instance.SetNew(&new_HldSubEvent);
      instance.SetNewArray(&newArray_HldSubEvent);
      instance.SetDelete(&delete_HldSubEvent);
      instance.SetDeleteArray(&deleteArray_HldSubEvent);
      instance.SetDestructor(&destruct_HldSubEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HldSubEvent*)
   {
      return GenerateInitInstanceLocal((::HldSubEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldSubEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HldEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_HldEvent(void *p = 0);
   static void *newArray_HldEvent(Long_t size, void *p);
   static void delete_HldEvent(void *p);
   static void deleteArray_HldEvent(void *p);
   static void destruct_HldEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HldEvent*)
   {
      ::HldEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldEvent", ::HldEvent::Class_Version(), "./hldevent_wk.h", 31,
                  typeid(::HldEvent), DefineBehavior(ptr, ptr),
                  &::HldEvent::Dictionary, isa_proxy, 0,
                  sizeof(::HldEvent) );
      instance.SetNew(&new_HldEvent);
      instance.SetNewArray(&newArray_HldEvent);
      instance.SetDelete(&delete_HldEvent);
      instance.SetDeleteArray(&deleteArray_HldEvent);
      instance.SetDestructor(&destruct_HldEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HldEvent*)
   {
      return GenerateInitInstanceLocal((::HldEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Unpacker(void *p = 0);
   static void *newArray_Unpacker(Long_t size, void *p);
   static void delete_Unpacker(void *p);
   static void deleteArray_Unpacker(void *p);
   static void destruct_Unpacker(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Unpacker*)
   {
      ::Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Unpacker", ::Unpacker::Class_Version(), "./unpacker_wk.h", 30,
                  typeid(::Unpacker), DefineBehavior(ptr, ptr),
                  &::Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::Unpacker) );
      instance.SetNew(&new_Unpacker);
      instance.SetNewArray(&newArray_Unpacker);
      instance.SetDelete(&delete_Unpacker);
      instance.SetDeleteArray(&deleteArray_Unpacker);
      instance.SetDestructor(&destruct_Unpacker);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Unpacker*)
   {
      return GenerateInitInstanceLocal((::Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EventHdr_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_EventHdr(void *p = 0);
   static void *newArray_EventHdr(Long_t size, void *p);
   static void delete_EventHdr(void *p);
   static void deleteArray_EventHdr(void *p);
   static void destruct_EventHdr(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventHdr*)
   {
      ::EventHdr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EventHdr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EventHdr", ::EventHdr::Class_Version(), "./eventhdr_wk.h", 23,
                  typeid(::EventHdr), DefineBehavior(ptr, ptr),
                  &::EventHdr::Dictionary, isa_proxy, 0,
                  sizeof(::EventHdr) );
      instance.SetNew(&new_EventHdr);
      instance.SetNewArray(&newArray_EventHdr);
      instance.SetDelete(&delete_EventHdr);
      instance.SetDeleteArray(&deleteArray_EventHdr);
      instance.SetDestructor(&destruct_EventHdr);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventHdr*)
   {
      return GenerateInitInstanceLocal((::EventHdr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventHdr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Hit_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Hit(void *p = 0);
   static void *newArray_Hit(Long_t size, void *p);
   static void delete_Hit(void *p);
   static void deleteArray_Hit(void *p);
   static void destruct_Hit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Hit*)
   {
      ::Hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Hit", ::Hit::Class_Version(), "./hit_wk.h", 23,
                  typeid(::Hit), DefineBehavior(ptr, ptr),
                  &::Hit::Dictionary, isa_proxy, 0,
                  sizeof(::Hit) );
      instance.SetNew(&new_Hit);
      instance.SetNewArray(&newArray_Hit);
      instance.SetDelete(&delete_Hit);
      instance.SetDeleteArray(&deleteArray_Hit);
      instance.SetDestructor(&destruct_Hit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Hit*)
   {
      return GenerateInitInstanceLocal((::Hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "./event_wk.h", 35,
                  typeid(::Event), DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 0,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *HldSubEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HldSubEvent::Class_Name()
{
   return "HldSubEvent";
}

//______________________________________________________________________________
const char *HldSubEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HldSubEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldSubEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HldSubEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldSubEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HldSubEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldSubEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HldSubEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HldEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HldEvent::Class_Name()
{
   return "HldEvent";
}

//______________________________________________________________________________
const char *HldEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HldEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HldEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HldEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HldEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Unpacker::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Unpacker::Class_Name()
{
   return "Unpacker";
}

//______________________________________________________________________________
const char *Unpacker::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Unpacker::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Unpacker::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Unpacker::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Unpacker*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EventHdr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventHdr::Class_Name()
{
   return "EventHdr";
}

//______________________________________________________________________________
const char *EventHdr::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventHdr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventHdr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventHdr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventHdr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventHdr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventHdr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventHdr*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Hit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Hit::Class_Name()
{
   return "Hit";
}

//______________________________________________________________________________
const char *Hit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Hit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Hit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Hit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Event::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class Unpacker.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> pEvent;
      R__b >> EventNr;
      R__b >> EventLimit;
      R__b >> subEvtId;
      R__b >> pRootFile;
      { TString R__str; R__str.Streamer(R__b); inputFile = R__str.Data(); }
      R__b >> fpga_code;
      R__b.CheckByteCount(R__s, R__c, Unpacker::IsA());
   } else {
      R__c = R__b.WriteVersion(Unpacker::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << pEvent;
      R__b << EventNr;
      R__b << EventLimit;
      R__b << subEvtId;
      R__b << pRootFile;
      { TString R__str = inputFile.c_str(); R__str.Streamer(R__b);}
      R__b << fpga_code;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Unpacker::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Unpacker.
      TClass *R__cl = ::Unpacker::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pEvent", &pEvent);
      R__insp.Inspect(R__cl, R__parent, "EventNr", &EventNr);
      R__insp.Inspect(R__cl, R__parent, "EventLimit", &EventLimit);
      R__insp.Inspect(R__cl, R__parent, "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__parent, "*pRootFile", &pRootFile);
      R__insp.Inspect(R__cl, R__parent, "inputFile", (void*)&inputFile);
      ::ROOT::GenericShowMembers("string", (void*)&inputFile, R__insp, strcat(R__parent,"inputFile."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fpga_code", &fpga_code);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Unpacker(void *p) {
      return  p ? new(p) ::Unpacker : new ::Unpacker;
   }
   static void *newArray_Unpacker(Long_t nElements, void *p) {
      return p ? new(p) ::Unpacker[nElements] : new ::Unpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_Unpacker(void *p) {
      delete ((::Unpacker*)p);
   }
   static void deleteArray_Unpacker(void *p) {
      delete [] ((::Unpacker*)p);
   }
   static void destruct_Unpacker(void *p) {
      typedef ::Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Unpacker

//______________________________________________________________________________
void HldEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldEvent.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HldEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class HldEvent.
      TClass *R__cl = ::HldEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*file", &file);
      R__insp.Inspect(R__cl, R__parent, "status", (void*)&status);
      ::ROOT::GenericShowMembers("stat", (void*)&status, R__insp, strcat(R__parent,"status."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "isWritable", &isWritable);
      R__insp.Inspect(R__cl, R__parent, "fpgaAddr", &fpgaAddr);
      R__insp.Inspect(R__cl, R__parent, "fpgasAddr[10]", fpgasAddr);
      R__insp.Inspect(R__cl, R__parent, "fpgasNum", &fpgasNum);
      R__insp.Inspect(R__cl, R__parent, "hdr", (void*)&hdr);
      ::ROOT::GenericShowMembers("HldEvent::EvtHdr", (void*)&hdr, R__insp, strcat(R__parent,"hdr."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*pHdr", &pHdr);
      R__insp.Inspect(R__cl, R__parent, "*pData", &pData);
      R__insp.Inspect(R__cl, R__parent, "lastSubEvtIdx", &lastSubEvtIdx);
      R__insp.Inspect(R__cl, R__parent, "subEvtTable[100]", subEvtTable);
      R__insp.Inspect(R__cl, R__parent, "subEvt[100]", subEvt);
      R__insp.Inspect(R__cl, R__parent, "*pSubEvt", &pSubEvt);
      R__insp.Inspect(R__cl, R__parent, "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__parent, "LeadingTime[1280][10]", LeadingTime);
      R__insp.Inspect(R__cl, R__parent, "TrailingTime[1280][10]", TrailingTime);
      R__insp.Inspect(R__cl, R__parent, "WidthTime[1280][10]", WidthTime);
      R__insp.Inspect(R__cl, R__parent, "trbADC[1280][10]", trbADC);
      R__insp.Inspect(R__cl, R__parent, "LeadingMult[1280]", LeadingMult);
      R__insp.Inspect(R__cl, R__parent, "WidthMult[1280]", WidthMult);
      R__insp.Inspect(R__cl, R__parent, "TrailingMult[1280]", TrailingMult);
      R__insp.Inspect(R__cl, R__parent, "errors_per_event", &errors_per_event);
      R__insp.Inspect(R__cl, R__parent, "debugFlag", &debugFlag);
      R__insp.Inspect(R__cl, R__parent, "debugFlag1", &debugFlag1);
      R__insp.Inspect(R__cl, R__parent, "quietMode", &quietMode);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HldEvent(void *p) {
      return  p ? new(p) ::HldEvent : new ::HldEvent;
   }
   static void *newArray_HldEvent(Long_t nElements, void *p) {
      return p ? new(p) ::HldEvent[nElements] : new ::HldEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_HldEvent(void *p) {
      delete ((::HldEvent*)p);
   }
   static void deleteArray_HldEvent(void *p) {
      delete [] ((::HldEvent*)p);
   }
   static void destruct_HldEvent(void *p) {
      typedef ::HldEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HldEvent

//______________________________________________________________________________
void HldSubEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldSubEvent.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HldSubEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class HldSubEvent.
      TClass *R__cl = ::HldSubEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*pHdr", &pHdr);
      R__insp.Inspect(R__cl, R__parent, "*pData", &pData);
      R__insp.Inspect(R__cl, R__parent, "swapped", &swapped);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HldSubEvent(void *p) {
      return  p ? new(p) ::HldSubEvent : new ::HldSubEvent;
   }
   static void *newArray_HldSubEvent(Long_t nElements, void *p) {
      return p ? new(p) ::HldSubEvent[nElements] : new ::HldSubEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_HldSubEvent(void *p) {
      delete ((::HldSubEvent*)p);
   }
   static void deleteArray_HldSubEvent(void *p) {
      delete [] ((::HldSubEvent*)p);
   }
   static void destruct_HldSubEvent(void *p) {
      typedef ::HldSubEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HldSubEvent

//______________________________________________________________________________
void Hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class Hit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> channel;
      R__b >> TDC;
      R__b >> nHits;
      R__b >> time1;
      R__b >> width1;
      R__b >> time2;
      R__b >> width2;
      R__b >> time3;
      R__b >> width3;
      R__b >> time4;
      R__b >> width4;
      R__b >> width_wk;
      R__b >> leadTime1;
      R__b >> trailTime1;
      R__b >> leadTime2;
      R__b >> trailTime2;
      R__b >> leadTime3;
      R__b >> trailTime3;
      R__b >> leadTime4;
      R__b >> trailTime4;
      R__b.CheckByteCount(R__s, R__c, Hit::IsA());
   } else {
      R__c = R__b.WriteVersion(Hit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << channel;
      R__b << TDC;
      R__b << nHits;
      R__b << time1;
      R__b << width1;
      R__b << time2;
      R__b << width2;
      R__b << time3;
      R__b << width3;
      R__b << time4;
      R__b << width4;
      R__b << width_wk;
      R__b << leadTime1;
      R__b << trailTime1;
      R__b << leadTime2;
      R__b << trailTime2;
      R__b << leadTime3;
      R__b << trailTime3;
      R__b << leadTime4;
      R__b << trailTime4;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Hit::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Hit.
      TClass *R__cl = ::Hit::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "channel", &channel);
      R__insp.Inspect(R__cl, R__parent, "TDC", &TDC);
      R__insp.Inspect(R__cl, R__parent, "nHits", &nHits);
      R__insp.Inspect(R__cl, R__parent, "time1", &time1);
      R__insp.Inspect(R__cl, R__parent, "width1", &width1);
      R__insp.Inspect(R__cl, R__parent, "time2", &time2);
      R__insp.Inspect(R__cl, R__parent, "width2", &width2);
      R__insp.Inspect(R__cl, R__parent, "time3", &time3);
      R__insp.Inspect(R__cl, R__parent, "width3", &width3);
      R__insp.Inspect(R__cl, R__parent, "time4", &time4);
      R__insp.Inspect(R__cl, R__parent, "width4", &width4);
      R__insp.Inspect(R__cl, R__parent, "width_wk", &width_wk);
      R__insp.Inspect(R__cl, R__parent, "leadTime1", &leadTime1);
      R__insp.Inspect(R__cl, R__parent, "trailTime1", &trailTime1);
      R__insp.Inspect(R__cl, R__parent, "leadTime2", &leadTime2);
      R__insp.Inspect(R__cl, R__parent, "trailTime2", &trailTime2);
      R__insp.Inspect(R__cl, R__parent, "leadTime3", &leadTime3);
      R__insp.Inspect(R__cl, R__parent, "trailTime3", &trailTime3);
      R__insp.Inspect(R__cl, R__parent, "leadTime4", &leadTime4);
      R__insp.Inspect(R__cl, R__parent, "trailTime4", &trailTime4);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Hit(void *p) {
      return  p ? new(p) ::Hit : new ::Hit;
   }
   static void *newArray_Hit(Long_t nElements, void *p) {
      return p ? new(p) ::Hit[nElements] : new ::Hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_Hit(void *p) {
      delete ((::Hit*)p);
   }
   static void deleteArray_Hit(void *p) {
      delete [] ((::Hit*)p);
   }
   static void destruct_Hit(void *p) {
      typedef ::Hit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Hit

//______________________________________________________________________________
void EventHdr::Streamer(TBuffer &R__b)
{
   // Stream an object of class EventHdr.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> size;
      R__b >> decoding;
      R__b >> id;
      R__b >> seqNr;
      R__b >> date;
      R__b >> time;
      R__b >> year;
      R__b >> month;
      R__b >> day;
      R__b >> hour;
      R__b >> minute;
      R__b >> second;
      R__b >> pad;
      R__b >> dataSize;
      R__b >> paddedSize;
      R__b.CheckByteCount(R__s, R__c, EventHdr::IsA());
   } else {
      R__c = R__b.WriteVersion(EventHdr::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << size;
      R__b << decoding;
      R__b << id;
      R__b << seqNr;
      R__b << date;
      R__b << time;
      R__b << year;
      R__b << month;
      R__b << day;
      R__b << hour;
      R__b << minute;
      R__b << second;
      R__b << pad;
      R__b << dataSize;
      R__b << paddedSize;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void EventHdr::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class EventHdr.
      TClass *R__cl = ::EventHdr::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "size", &size);
      R__insp.Inspect(R__cl, R__parent, "decoding", &decoding);
      R__insp.Inspect(R__cl, R__parent, "id", &id);
      R__insp.Inspect(R__cl, R__parent, "seqNr", &seqNr);
      R__insp.Inspect(R__cl, R__parent, "date", &date);
      R__insp.Inspect(R__cl, R__parent, "time", &time);
      R__insp.Inspect(R__cl, R__parent, "year", &year);
      R__insp.Inspect(R__cl, R__parent, "month", &month);
      R__insp.Inspect(R__cl, R__parent, "day", &day);
      R__insp.Inspect(R__cl, R__parent, "hour", &hour);
      R__insp.Inspect(R__cl, R__parent, "minute", &minute);
      R__insp.Inspect(R__cl, R__parent, "second", &second);
      R__insp.Inspect(R__cl, R__parent, "pad", &pad);
      R__insp.Inspect(R__cl, R__parent, "dataSize", &dataSize);
      R__insp.Inspect(R__cl, R__parent, "paddedSize", &paddedSize);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventHdr(void *p) {
      return  p ? new(p) ::EventHdr : new ::EventHdr;
   }
   static void *newArray_EventHdr(Long_t nElements, void *p) {
      return p ? new(p) ::EventHdr[nElements] : new ::EventHdr[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventHdr(void *p) {
      delete ((::EventHdr*)p);
   }
   static void deleteArray_EventHdr(void *p) {
      delete [] ((::EventHdr*)p);
   }
   static void destruct_EventHdr(void *p) {
      typedef ::EventHdr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventHdr

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      EvtHdr.Streamer(R__b);
      R__b >> const_cast<  Int_t &>( kMaxMult );
      R__b >> const_cast<  Int_t &>( kMaxChannelNr );
      R__b >> subEvtId;
      R__b >> errors_per_event;
      R__b >> referenceChannel;
      R__b >> referenceTime;
      R__b >> totalNHits;
      Hits->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, Event::IsA());
   } else {
      R__c = R__b.WriteVersion(Event::IsA(), kTRUE);
      TObject::Streamer(R__b);
      EvtHdr.Streamer(R__b);
      R__b << const_cast<  Int_t &>( kMaxMult );
      R__b << const_cast<  Int_t &>( kMaxChannelNr );
      R__b << subEvtId;
      R__b << errors_per_event;
      R__b << referenceChannel;
      R__b << referenceTime;
      R__b << totalNHits;
      Hits->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "EvtHdr", &EvtHdr);
      EvtHdr.ShowMembers(R__insp, strcat(R__parent,"EvtHdr.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "kMaxMult", &kMaxMult);
      R__insp.Inspect(R__cl, R__parent, "kMaxChannelNr", &kMaxChannelNr);
      R__insp.Inspect(R__cl, R__parent, "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__parent, "errors_per_event", &errors_per_event);
      R__insp.Inspect(R__cl, R__parent, "referenceChannel", &referenceChannel);
      R__insp.Inspect(R__cl, R__parent, "referenceTime", &referenceTime);
      R__insp.Inspect(R__cl, R__parent, "totalNHits", &totalNHits);
      R__insp.Inspect(R__cl, R__parent, "*Hits", &Hits);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Event

/********************************************************
* mydict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablemydict();

extern "C" void G__set_cpp_environmentmydict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("unpacker_wk.h");
  G__add_compiledheader("hldevent_wk.h");
  G__add_compiledheader("hldsubevent_wk.h");
  G__add_compiledheader("event_wk.h");
  G__add_compiledheader("eventhdr_wk.h");
  G__add_compiledheader("hit_wk.h");
  G__cpp_reset_tagtablemydict();
}
#include <new>
extern "C" int G__cpp_dllrevmydict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HldSubEvent */
static int G__mydict_491_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldSubEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldSubEvent[n];
     } else {
       p = new((void*) gvp) HldSubEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldSubEvent;
     } else {
       p = new((void*) gvp) HldSubEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldSubEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldSubEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HldSubEvent((UInt4*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HldSubEvent((UInt4*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldSubEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldSubEvent*) G__getstructoffset())->getWordSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldSubEvent*) G__getstructoffset())->getTrigNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldSubEvent*) G__getstructoffset())->getUnMaskedTrigNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldSubEvent*) G__getstructoffset())->getDataLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldSubEvent*) G__getstructoffset())->swapData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HldSubEvent*) G__getstructoffset())->dumpIt((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const HldSubEvent*) G__getstructoffset())->dumpIt();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldSubEvent*) G__getstructoffset())->scanIt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldSubEvent*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldSubEvent*) G__getstructoffset())->getId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldSubEvent*) G__getstructoffset())->getDecoding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HldSubEvent*) G__getstructoffset())->getErrorBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldSubEvent*) G__getstructoffset())->getHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldSubEvent*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldSubEvent*) G__getstructoffset())->getDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldSubEvent*) G__getstructoffset())->getPaddedSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldSubEvent*) G__getstructoffset())->getEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldSubEvent*) G__getstructoffset())->getPaddedEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldSubEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSubEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldSubEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldSubEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldSubEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSubEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldSubEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSubEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_491_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldSubEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_491_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HldSubEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HldSubEvent(*(HldSubEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldSubEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldSubEvent G__THldSubEvent;
static int G__mydict_491_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldSubEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldSubEvent*) (soff+(sizeof(HldSubEvent)*i)))->~G__THldSubEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldSubEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldSubEvent*) (soff))->~G__THldSubEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mydict_491_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldSubEvent* dest = (HldSubEvent*) G__getstructoffset();
   *dest = *(HldSubEvent*) libp->para[0].ref;
   const HldSubEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldEvent */
static int G__mydict_497_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldEvent[n];
     } else {
       p = new((void*) gvp) HldEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldEvent;
     } else {
       p = new((void*) gvp) HldEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HldEvent*) G__getstructoffset())->HexStrToInt((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HldEvent(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HldEvent(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldEvent*) G__getstructoffset())->getHdrSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getDecoding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getSeqNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getYear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getMonth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getHour());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getMinute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getSecond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getRunNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HldEvent*) G__getstructoffset())->getPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldEvent*) G__getstructoffset())->getHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldEvent*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldEvent*) G__getstructoffset())->getDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const HldEvent*) G__getstructoffset())->getPaddedSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldEvent*) G__getstructoffset())->getEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const HldEvent*) G__getstructoffset())->getPaddedEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldEvent*) G__getstructoffset())->setWritable((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldEvent*) G__getstructoffset())->setWritable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->setFile((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->readSubEvt((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->read());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->execute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->swap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldEvent*) G__getstructoffset())->setSubEvtId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldEvent*) G__getstructoffset())->setSubEvtId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldEvent*) G__getstructoffset())->appendSubEvtIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getkMaxMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getkMaxChannelNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HldEvent*) G__getstructoffset())->getpSubEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getLeadingTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getTrailingTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getWidthTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getLeadingMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getTrailingMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldEvent*) G__getstructoffset())->getSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldEvent*) G__getstructoffset())->decode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->setDebugFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->setDebugFlag1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->incErrorNr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->PrintTdcError((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->fill_trail((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->fill_lead((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldEvent*) G__getstructoffset())->fill_width((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_497_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_497_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HldEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HldEvent(*(HldEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_HldEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldEvent G__THldEvent;
static int G__mydict_497_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldEvent*) (soff+(sizeof(HldEvent)*i)))->~G__THldEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldEvent*) (soff))->~G__THldEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mydict_497_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldEvent* dest = (HldEvent*) G__getstructoffset();
   *dest = *(HldEvent*) libp->para[0].ref;
   const HldEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Unpacker */
static int G__mydict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker[n];
     } else {
       p = new((void*) gvp) Unpacker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker;
     } else {
       p = new((void*) gvp) Unpacker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Unpacker(
(const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Unpacker((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Unpacker((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Unpacker((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->setRootFile((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->setRootFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Unpacker*) G__getstructoffset())->setInputFile((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->eventLoop((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->eventLoop((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->eventLoop());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Unpacker*) G__getstructoffset())->setpEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Unpacker*) G__getstructoffset())->getpEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Unpacker*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Unpacker*) G__getstructoffset())->getEventLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_501_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_501_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Unpacker(*(Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Unpacker G__TUnpacker;
static int G__mydict_501_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Unpacker*) (soff+(sizeof(Unpacker)*i)))->~G__TUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Unpacker*) (soff))->~G__TUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mydict_501_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Unpacker* dest = (Unpacker*) G__getstructoffset();
   *dest = *(Unpacker*) libp->para[0].ref;
   const Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventHdr */
static int G__mydict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventHdr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventHdr[n];
     } else {
       p = new((void*) gvp) EventHdr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventHdr;
     } else {
       p = new((void*) gvp) EventHdr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_EventHdr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventHdr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new EventHdr(*(HldEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) EventHdr(*(HldEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_EventHdr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getDecoding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getSeqNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getYear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getMonth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getHour());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getMinute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getSecond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((EventHdr*) G__getstructoffset())->getPaddedSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setDecoding((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setDecoding();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setSeqNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setSeqNr();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setDate((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setDate();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setTime();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setYear((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setYear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setMonth((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setMonth();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setDay((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setDay();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setHour((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setHour();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setMinute((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setMinute();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setSecond((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setSecond();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setPad((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setPad();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setDataSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setDataSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((EventHdr*) G__getstructoffset())->setPaddedSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((EventHdr*) G__getstructoffset())->setPaddedSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((EventHdr*) G__getstructoffset())->fill(*(HldEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHdr*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EventHdr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHdr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EventHdr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EventHdr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHdr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHdr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventHdr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHdr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_503_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventHdr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_503_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventHdr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventHdr(*(EventHdr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_EventHdr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventHdr G__TEventHdr;
static int G__mydict_503_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventHdr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventHdr*) (soff+(sizeof(EventHdr)*i)))->~G__TEventHdr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventHdr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventHdr*) (soff))->~G__TEventHdr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mydict_503_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventHdr* dest = (EventHdr*) G__getstructoffset();
   *dest = *(EventHdr*) libp->para[0].ref;
   const EventHdr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Hit */
static int G__mydict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit[n];
     } else {
       p = new((void*) gvp) Hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit;
     } else {
       p = new((void*) gvp) Hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Hit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Hit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setChannel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Hit*) G__getstructoffset())->setTDC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setNHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTime1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setWidth1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTime2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setWidth2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTime3((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setWidth3((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTime4((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setWidth4((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setWidth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setLeadTime1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTrailTime1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setLeadTime2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTrailTime2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setLeadTime3((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTrailTime3((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setLeadTime4((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->setTrailTime4((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getWidth1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getWidth2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTime3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getWidth3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTime4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getWidth4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getLeadTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTrailTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getLeadTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTrailTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getLeadTime3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTrailTime3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getLeadTime4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Hit*) G__getstructoffset())->getTrailTime4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->getWidth((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->getTimeAndWidth((const Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Hit*) G__getstructoffset())->fillTimeAndWidth((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Hit*) G__getstructoffset())->fill_lead((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Hit*) G__getstructoffset())->fill_trail((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_504_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_504_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Hit(*(Hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Hit G__THit;
static int G__mydict_504_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Hit*) (soff+(sizeof(Hit)*i)))->~G__THit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Hit*) (soff))->~G__THit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mydict_504_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* dest = (Hit*) G__getstructoffset();
   *dest = *(Hit*) libp->para[0].ref;
   const Hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__mydict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event[n];
     } else {
       p = new((void*) gvp) Event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event;
     } else {
       p = new((void*) gvp) Event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Event(*(HldEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Event(*(HldEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtDecoding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtSeqNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtYear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtMonth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtHour());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtMinute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtSecond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getEvtPaddedSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getReferenceTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getReferenceChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->getErrors_per_event());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->getHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->setErrors_per_event((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->setReferenceChannel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->setReferenceTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Event*) G__getstructoffset())->setSubEvtId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Event*) G__getstructoffset())->setSubEvtId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->addHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Event*) G__getstructoffset())->fill(*(HldEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mydict_505_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mydict_505_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mydictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__mydict_505_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HldSubEvent */

/* HldEvent */

/* Unpacker */

/* EventHdr */

/* Hit */

/* Event */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncmydict {
 public:
  G__Sizep2memfuncmydict(): p(&G__Sizep2memfuncmydict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncmydict::*p)();
};

size_t G__get_sizep2memfuncmydict()
{
  G__Sizep2memfuncmydict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancemydict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_HldSubEvent))) {
     HldSubEvent *G__Lderived;
     G__Lderived=(HldSubEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_HldSubEvent),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_HldEvent))) {
     HldEvent *G__Lderived;
     G__Lderived=(HldEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_HldEvent),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_Unpacker))) {
     Unpacker *G__Lderived;
     G__Lderived=(Unpacker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_Unpacker),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_EventHdr))) {
     EventHdr *G__Lderived;
     G__Lderived=(EventHdr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_EventHdr),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_Hit))) {
     Hit *G__Lderived;
     G__Lderived=(Hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_Hit),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mydictLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mydictLN_Event),G__get_linked_tagnum(&G__mydictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablemydict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mydictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mydictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("UInt4",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("HPP",85,G__get_linked_tagnum(&G__mydictLN_HldSubEvent),2,G__get_linked_tagnum(&G__mydictLN_HldEvent));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HldSubEvent */
static void G__setup_memvarHldSubEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_HldSubEvent));
   { HldSubEvent *p; p=(HldSubEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt4"),-1,4,"pHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt4"),-1,4,"pData=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"swapped=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldEvent */
static void G__setup_memvarHldEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_HldEvent));
   { HldEvent *p; p=(HldEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("istream"),-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_stat),-1,-1,4,"status=",0,"! status struct of hld file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isWritable=",0,"flag used for HLD output");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fpgaAddr=",0,"number used in the decode() to select the subevents from given fpga");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fpgasAddr[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fpgasNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_HldEventcLcLEvtHdr),-1,-1,2,"hdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt4"),-1,2,"pHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt4"),-1,2,"pData=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"lastSubEvtIdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,1,-1,G__defined_typename("size_t"),-2,2,"maxSubEvtIdx=100",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_HldEventcLcLSubEvtTable),-1,-1,2,"subEvtTable[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,1,-1,G__defined_typename("size_t"),-2,2,"maxSubEvts=100",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_HldSubEvent),-1,-1,2,"subEvt[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"kMaxMult=10",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"kMaxChannelNr=1280",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_HldSubEvent),-1,-1,2,"pSubEvt=",0,"! pointer to subevent where data are read from");
   G__memvar_setup((void*)((long)(&p->subEvtId)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"subEvtId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeadingTime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LeadingTime[1280][10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrailingTime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrailingTime[1280][10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WidthTime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"WidthTime[1280][10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trbADC)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trbADC[1280][10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeadingMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LeadingMult[1280]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WidthMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"WidthMult[1280]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrailingMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrailingMult[1280]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errors_per_event)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"errors_per_event=",0,"number of errors per event");
   G__memvar_setup((void*)((long)(&p->debugFlag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"debugFlag=",0,"allows to print subevent information");
   G__memvar_setup((void*)((long)(&p->debugFlag1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"debugFlag1=",0,"used for special purpuses");
   G__memvar_setup((void*)((long)(&p->quietMode)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"quietMode=",0,"! do not print errors!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Unpacker */
static void G__setup_memvarUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_Unpacker));
   { Unpacker *p; p=(Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_HldEvent),-1,-1,2,"pEvent=",0,"Current event read from file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"EventNr=",0,"Event Counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"EventLimit=",0,"Maximum event number per file ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEvtId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TFile),-1,-1,2,"pRootFile=",0,"pointer to TFile with the output tree");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_string),-1,-1,2,"inputFile=",0,"wk 28.05");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fpga_code=",0,"address of the data source (e.g. given fpga ) decoded from hld file ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventHdr */
static void G__setup_memvarEventHdr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_EventHdr));
   { EventHdr *p; p=(EventHdr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"size=",0,"size_t");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"decoding=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"seqNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"date=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"year=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"month=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"day=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"hour=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minute=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"second=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"pad=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dataSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"paddedSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Hit */
static void G__setup_memvarHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_Hit));
   { Hit *p; p=(Hit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"channel=",0,"channel number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TDC=",0,"TDC number from 0-3");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits in channel in one event (up to 4)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time1=",0,"tdc time of 1st hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width1=",0,"width of 1st hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time2=",0,"tdc time of 2nd hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width2=",0,"width of 2nd hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time3=",0,"tdc time of 3rd hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width3=",0,"width of 3rd hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time4=",0,"tdc time of 4th hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width4=",0,"width of 4th hit");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"kMaxMult=0",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width_wk=",0,"leading time - trailing time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"leadTime1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trailTime1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"leadTime2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trailTime2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"leadTime3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trailTime3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"leadTime4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trailTime4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mydictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mydictLN_EventHdr),-1,-1,2,"EvtHdr=",0,"contains data from event header ");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,2,"kMaxMult=",0,"Maximum number of multiplicity");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,2,"kMaxChannelNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,"Id of subEvent according to HLD format");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"errors_per_event=",0,"number of TDC errors per event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"referenceChannel=",0,"reference channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"referenceTime=",0,"reference time from indicated channel if it is used");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"totalNHits=",0,"total number of hits per one event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClonesArray),-1,-1,4,"Hits=",0,"array with all hits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClonesArray),-1,-2,4,"gHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mydictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarmydict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHldSubEvent(void) {
   /* HldSubEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_HldSubEvent));
   G__memfunc_setup("HldSubEvent",1092,G__mydict_491_0_1, 105, G__get_linked_tagnum(&G__mydictLN_HldSubEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldSubEvent",1092,G__mydict_491_0_2, 105, G__get_linked_tagnum(&G__mydictLN_HldSubEvent), -1, 0, 1, 1, 1, 0, "H - 'UInt4' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWordSize",1143,G__mydict_491_0_3, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrigNr",918,G__mydict_491_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUnMaskedTrigNr",1710,G__mydict_491_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataLen",985,G__mydict_491_0_6, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swapData",821,G__mydict_491_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dumpIt",627,G__mydict_491_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "E - - 0 'stderr' output", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanIt",610,G__mydict_491_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__mydict_491_0_10, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getId",493,G__mydict_491_0_11, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecoding",1117,G__mydict_491_0_12, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrorBit",1129,G__mydict_491_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeader",905,G__mydict_491_0_14, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__mydict_491_0_15, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataSize",1109,G__mydict_491_0_16, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPaddedSize",1309,G__mydict_491_0_17, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnd",599,G__mydict_491_0_18, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPaddedEnd",1177,G__mydict_491_0_19, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wasSwapped",1055,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetSwapFlag",1336,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHdrLen",893,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataPaddedSize",1687,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSwapped",944,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swapHdr",729,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("byte",436,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 4, 8, 
"i - - 0 - b h - 'UInt4' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("align8",579,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 4, 8, "k - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap4",495,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"H - 'UInt_t' 0 - p k - 'size_t' 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap2",493,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"R - 'UShort_t' 0 - p k - 'size_t' 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHdrSize",1017,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_491_0_31, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldSubEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_491_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSubEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_491_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldSubEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_491_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldSubEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_491_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_491_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSubEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_491_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldSubEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_491_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSubEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_491_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldSubEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HldSubEvent", 1092, G__mydict_491_0_43, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_HldSubEvent), -1, 0, 1, 1, 1, 0, "u 'HldSubEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HldSubEvent", 1218, G__mydict_491_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mydict_491_0_45, (int) ('u'), G__get_linked_tagnum(&G__mydictLN_HldSubEvent), -1, 1, 1, 1, 1, 0, "u 'HldSubEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldEvent(void) {
   /* HldEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_HldEvent));
   G__memfunc_setup("HldEvent",794,G__mydict_497_0_1, 105, G__get_linked_tagnum(&G__mydictLN_HldEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HexStrToInt",1100,G__mydict_497_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldEvent",794,G__mydict_497_0_3, 105, G__get_linked_tagnum(&G__mydictLN_HldEvent), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - subId "
"C - - 10 - fpgaAddr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHdrSize",1017,G__mydict_497_0_4, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__mydict_497_0_5, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecoding",1117,G__mydict_497_0_6, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getId",493,G__mydict_497_0_7, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeqNr",809,G__mydict_497_0_8, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDate",702,G__mydict_497_0_9, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__mydict_497_0_10, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYear",721,G__mydict_497_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMonth",838,G__mydict_497_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDay",606,G__mydict_497_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHour",734,G__mydict_497_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinute",946,G__mydict_497_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecond",924,G__mydict_497_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunNr",821,G__mydict_497_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__mydict_497_0_18, 104, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeader",905,G__mydict_497_0_19, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__mydict_497_0_20, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataSize",1109,G__mydict_497_0_21, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPaddedSize",1309,G__mydict_497_0_22, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnd",599,G__mydict_497_0_23, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPaddedEnd",1177,G__mydict_497_0_24, 72, -1, G__defined_typename("UInt4"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWritable",1158,G__mydict_497_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFile",716,G__mydict_497_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSubEvt",1013,G__mydict_497_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__mydict_497_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,G__mydict_497_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__mydict_497_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubEvtId",1106,G__mydict_497_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("appendSubEvtIdx",1526,G__mydict_497_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHdrLen",893,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataPaddedSize",1687,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSwapped",944,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swapHdr",729,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("byte",436,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 2, 8, 
"i - - 0 - b h - 'UInt4' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("align8",579,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 2, 8, "k - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap4",495,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"H - 'UInt_t' 0 - p k - 'size_t' 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap2",493,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"R - 'UShort_t' 0 - p k - 'size_t' 10 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataLen",985,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getkMaxMult",1139,G__mydict_497_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getkMaxChannelNr",1610,G__mydict_497_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getpSubEvt",1033,G__mydict_497_0_45, 85, G__get_linked_tagnum(&G__mydictLN_HldSubEvent), G__defined_typename("HldEvent::HPP"), 2, 0, 1, 1, 4, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadingTime",1411,G__mydict_497_0_46, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailingTime",1545,G__mydict_497_0_47, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidthTime",1231,G__mydict_497_0_48, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - channel i - 'Int_t' 0 - mult", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadingMult",1430,G__mydict_497_0_49, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailingMult",1564,G__mydict_497_0_50, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,G__mydict_497_0_51, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decode",612,G__mydict_497_0_52, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAll",800,G__mydict_497_0_53, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__mydict_497_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugFlag",1197,G__mydict_497_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugFlag1",1246,G__mydict_497_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incErrorNr",1028,G__mydict_497_0_57, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTdcError",1330,G__mydict_497_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_trail",1058,G__mydict_497_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_lead",924,G__mydict_497_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_width",1062,G__mydict_497_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_497_0_62, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_497_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_497_0_64, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_497_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_497_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_497_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_497_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_497_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_497_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HldEvent", 794, G__mydict_497_0_74, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_HldEvent), -1, 0, 1, 1, 1, 0, "u 'HldEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HldEvent", 920, G__mydict_497_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mydict_497_0_76, (int) ('u'), G__get_linked_tagnum(&G__mydictLN_HldEvent), -1, 1, 1, 1, 1, 0, "u 'HldEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncUnpacker(void) {
   /* Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_Unpacker));
   G__memfunc_setup("Unpacker",825,G__mydict_501_0_1, 105, G__get_linked_tagnum(&G__mydictLN_Unpacker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpacker",825,G__mydict_501_0_2, 105, G__get_linked_tagnum(&G__mydictLN_Unpacker), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 '50000' nEvt "
"i - 'Int_t' 0 '803' subEvtId i - 'Int_t' 0 '95' referenceChannel "
"C - - 10 '\"\"' fpga_code", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRootFile",1136,G__mydict_501_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 '\"test.root\"' filename", "to set the root output file", (void*) NULL, 0);
   G__memfunc_setup("setInputFile",1244,G__mydict_501_0_4, 117, G__get_linked_tagnum(&G__mydictLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 - filename", "to set the hld input file", (void*) NULL, 0);
   G__memfunc_setup("eventLoop",956,G__mydict_501_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '50000' NbEvt i - 'Int_t' 0 '0' startEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setpEvent",958,G__mydict_501_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - subId", "it sets pEvent by reading hld file", (void*) NULL, 0);
   G__memfunc_setup("getpEvent",946,G__mydict_501_0_7, 85, G__get_linked_tagnum(&G__mydictLN_HldEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__mydict_501_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventLimit",1345,G__mydict_501_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setpEvent",958,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HldEvent' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_501_0_11, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_501_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_501_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_501_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_501_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_501_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_501_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_501_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_501_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Unpacker", 825, G__mydict_501_0_23, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_Unpacker), -1, 0, 1, 1, 1, 0, "u 'Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Unpacker", 951, G__mydict_501_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mydict_501_0_25, (int) ('u'), G__get_linked_tagnum(&G__mydictLN_Unpacker), -1, 1, 1, 1, 1, 0, "u 'Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventHdr(void) {
   /* EventHdr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_EventHdr));
   G__memfunc_setup("EventHdr",800,G__mydict_503_0_1, 105, G__get_linked_tagnum(&G__mydictLN_EventHdr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventHdr",800,G__mydict_503_0_2, 105, G__get_linked_tagnum(&G__mydictLN_EventHdr), -1, 0, 1, 1, 1, 0, "u 'HldEvent' - 11 - HldEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__mydict_503_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecoding",1117,G__mydict_503_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getId",493,G__mydict_503_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeqNr",809,G__mydict_503_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDate",702,G__mydict_503_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__mydict_503_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYear",721,G__mydict_503_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMonth",838,G__mydict_503_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDay",606,G__mydict_503_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHour",734,G__mydict_503_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinute",946,G__mydict_503_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecond",924,G__mydict_503_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__mydict_503_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataSize",1109,G__mydict_503_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPaddedSize",1309,G__mydict_503_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__mydict_503_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecoding",1129,G__mydict_503_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setId",505,G__mydict_503_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeqNr",821,G__mydict_503_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' se", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDate",714,G__mydict_503_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__mydict_503_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYear",733,G__mydict_503_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMonth",850,G__mydict_503_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDay",618,G__mydict_503_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHour",746,G__mydict_503_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinute",958,G__mydict_503_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecond",936,G__mydict_503_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPad",609,G__mydict_503_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDataSize",1121,G__mydict_503_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' ds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPaddedSize",1321,G__mydict_503_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' ps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__mydict_503_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HldEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAll",800,G__mydict_503_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_503_0_35, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EventHdr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_503_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHdr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_503_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EventHdr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_503_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EventHdr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_503_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_503_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHdr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_503_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventHdr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_503_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHdr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_503_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventHdr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EventHdr", 800, G__mydict_503_0_47, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_EventHdr), -1, 0, 1, 1, 1, 0, "u 'EventHdr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventHdr", 926, G__mydict_503_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mydict_503_0_49, (int) ('u'), G__get_linked_tagnum(&G__mydictLN_EventHdr), -1, 1, 1, 1, 1, 0, "u 'EventHdr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHit(void) {
   /* Hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_Hit));
   G__memfunc_setup("Hit",293,G__mydict_504_0_1, 105, G__get_linked_tagnum(&G__mydictLN_Hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hit",293,G__mydict_504_0_2, 105, G__get_linked_tagnum(&G__mydictLN_Hit), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - tdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChannel",1029,G__mydict_504_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC",551,G__mydict_504_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHits",818,G__mydict_504_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1",780,G__mydict_504_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth1",893,G__mydict_504_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2",781,G__mydict_504_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth2",894,G__mydict_504_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime3",782,G__mydict_504_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth3",895,G__mydict_504_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime4",783,G__mydict_504_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth4",896,G__mydict_504_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth",844,G__mydict_504_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - lead i - 'Int_t' 0 - trail", "lead-trail; }", (void*) NULL, 0);
   G__memfunc_setup("setLeadTime1",1154,G__mydict_504_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrailTime1",1288,G__mydict_504_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeadTime2",1155,G__mydict_504_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrailTime2",1289,G__mydict_504_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeadTime3",1156,G__mydict_504_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrailTime3",1290,G__mydict_504_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeadTime4",1157,G__mydict_504_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrailTime4",1291,G__mydict_504_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__mydict_504_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC",539,G__mydict_504_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__mydict_504_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1",768,G__mydict_504_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth1",881,G__mydict_504_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2",769,G__mydict_504_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth2",882,G__mydict_504_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime3",770,G__mydict_504_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth3",883,G__mydict_504_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime4",771,G__mydict_504_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth4",884,G__mydict_504_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__mydict_504_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadTime1",1142,G__mydict_504_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailTime1",1276,G__mydict_504_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadTime2",1143,G__mydict_504_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailTime2",1277,G__mydict_504_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadTime3",1144,G__mydict_504_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailTime3",1278,G__mydict_504_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeadTime4",1145,G__mydict_504_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrailTime4",1279,G__mydict_504_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__mydict_504_0_43, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__mydict_504_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndWidth",1506,G__mydict_504_0_45, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 1 - - "
"i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTimeAndWidth",1609,G__mydict_504_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_lead",924,G__mydict_504_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_trail",1058,G__mydict_504_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__mydict_504_0_49, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_504_0_50, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_504_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_504_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_504_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_504_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_504_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_504_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_504_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_504_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Hit", 293, G__mydict_504_0_62, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_Hit), -1, 0, 1, 1, 1, 0, "u 'Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hit", 419, G__mydict_504_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mydict_504_0_64, (int) ('u'), G__get_linked_tagnum(&G__mydictLN_Hit), -1, 1, 1, 1, 1, 0, "u 'Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mydictLN_Event));
   G__memfunc_setup("Event",514,G__mydict_505_0_1, 105, G__get_linked_tagnum(&G__mydictLN_Event), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Event",514,G__mydict_505_0_2, 105, G__get_linked_tagnum(&G__mydictLN_Event), -1, 0, 1, 1, 1, 0, "u 'HldEvent' - 11 - HldEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtSize",1034,G__mydict_505_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtDecoding",1420,G__mydict_505_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtId",796,G__mydict_505_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtSeqNr",1112,G__mydict_505_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtDate",1005,G__mydict_505_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtTime",1022,G__mydict_505_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtYear",1024,G__mydict_505_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtMonth",1141,G__mydict_505_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtDay",909,G__mydict_505_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtHour",1037,G__mydict_505_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtMinute",1249,G__mydict_505_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtSecond",1227,G__mydict_505_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtPad",900,G__mydict_505_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtDataSize",1412,G__mydict_505_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvtPaddedSize",1612,G__mydict_505_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,G__mydict_505_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReferenceTime",1630,G__mydict_505_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReferenceChannel",1928,G__mydict_505_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrors_per_event",2020,G__mydict_505_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHits",728,G__mydict_505_0_22, 85, G__get_linked_tagnum(&G__mydictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrors_per_event",2032,G__mydict_505_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReferenceChannel",1940,G__mydict_505_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReferenceTime",1642,G__mydict_505_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubEvtId",1106,G__mydict_505_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' sb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHit",590,G__mydict_505_0_27, 85, G__get_linked_tagnum(&G__mydictLN_Hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__mydict_505_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HldEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAll",800,G__mydict_505_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mydict_505_0_30, 85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mydict_505_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mydict_505_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mydict_505_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mydictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mydict_505_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mydict_505_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mydict_505_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mydict_505_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mydict_505_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__mydict_505_0_42, (int) ('i'), G__get_linked_tagnum(&G__mydictLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__mydict_505_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncmydict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalmydict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcmydict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__mydictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__mydictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__mydictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__mydictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__mydictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__mydictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__mydictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mydictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__mydictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__mydictLN_HldSubEvent = { "HldSubEvent" , 99 , -1 };
G__linked_taginfo G__mydictLN_stat = { "stat" , 115 , -1 };
G__linked_taginfo G__mydictLN_HldEvent = { "HldEvent" , 99 , -1 };
G__linked_taginfo G__mydictLN_HldEventcLcLEvtHdr = { "HldEvent::EvtHdr" , 115 , -1 };
G__linked_taginfo G__mydictLN_HldEventcLcLSubEvtTable = { "HldEvent::SubEvtTable" , 115 , -1 };
G__linked_taginfo G__mydictLN_Unpacker = { "Unpacker" , 99 , -1 };
G__linked_taginfo G__mydictLN_EventHdr = { "EventHdr" , 99 , -1 };
G__linked_taginfo G__mydictLN_Hit = { "Hit" , 99 , -1 };
G__linked_taginfo G__mydictLN_Event = { "Event" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablemydict() {
  G__mydictLN_TClass.tagnum = -1 ;
  G__mydictLN_TBuffer.tagnum = -1 ;
  G__mydictLN_TMemberInspector.tagnum = -1 ;
  G__mydictLN_TObject.tagnum = -1 ;
  G__mydictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__mydictLN_string.tagnum = -1 ;
  G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__mydictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mydictLN_TClonesArray.tagnum = -1 ;
  G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__mydictLN_TFile.tagnum = -1 ;
  G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__mydictLN_HldSubEvent.tagnum = -1 ;
  G__mydictLN_stat.tagnum = -1 ;
  G__mydictLN_HldEvent.tagnum = -1 ;
  G__mydictLN_HldEventcLcLEvtHdr.tagnum = -1 ;
  G__mydictLN_HldEventcLcLSubEvtTable.tagnum = -1 ;
  G__mydictLN_Unpacker.tagnum = -1 ;
  G__mydictLN_EventHdr.tagnum = -1 ;
  G__mydictLN_Hit.tagnum = -1 ;
  G__mydictLN_Event.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablemydict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__mydictLN_TClass);
   G__get_linked_tagnum_fwd(&G__mydictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__mydictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__mydictLN_TObject);
   G__get_linked_tagnum_fwd(&G__mydictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__mydictLN_string);
   G__get_linked_tagnum_fwd(&G__mydictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__mydictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mydictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__mydictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__mydictLN_TFile);
   G__get_linked_tagnum_fwd(&G__mydictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_HldSubEvent),sizeof(HldSubEvent),-1,61696,(char*)NULL,G__setup_memvarHldSubEvent,G__setup_memfuncHldSubEvent);
   G__get_linked_tagnum_fwd(&G__mydictLN_stat);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_HldEvent),sizeof(HldEvent),-1,62720,(char*)NULL,G__setup_memvarHldEvent,G__setup_memfuncHldEvent);
   G__get_linked_tagnum_fwd(&G__mydictLN_HldEventcLcLEvtHdr);
   G__get_linked_tagnum_fwd(&G__mydictLN_HldEventcLcLSubEvtTable);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_Unpacker),sizeof(Unpacker),-1,62720,(char*)NULL,G__setup_memvarUnpacker,G__setup_memfuncUnpacker);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_EventHdr),sizeof(EventHdr),-1,61696,(char*)NULL,G__setup_memvarEventHdr,G__setup_memfuncEventHdr);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_Hit),sizeof(Hit),-1,61696,(char*)NULL,G__setup_memvarHit,G__setup_memfuncHit);
   G__tagtable_setup(G__get_linked_tagnum(&G__mydictLN_Event),sizeof(Event),-1,62720,(char*)NULL,G__setup_memvarEvent,G__setup_memfuncEvent);
}
extern "C" void G__cpp_setupmydict(void) {
  G__check_setup_version(30051515,"G__cpp_setupmydict()");
  G__set_cpp_environmentmydict();
  G__cpp_setup_tagtablemydict();

  G__cpp_setup_inheritancemydict();

  G__cpp_setup_typetablemydict();

  G__cpp_setup_memvarmydict();

  G__cpp_setup_memfuncmydict();
  G__cpp_setup_globalmydict();
  G__cpp_setup_funcmydict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncmydict();
  return;
}
class G__cpp_setup_initmydict {
  public:
    G__cpp_setup_initmydict() { G__add_setup_func("mydict",(G__incsetup)(&G__cpp_setupmydict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initmydict() { G__remove_setup_func("mydict"); }
};
G__cpp_setup_initmydict G__cpp_setup_initializermydict;

